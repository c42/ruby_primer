title - Introduction to Ruby Hashes

.section :creating_hash, "Creating a Hash", 166
  %p
    A Hash is a collection of key-value pairs. You retrieve or create a new
    entry in a Hash by referring to its key. Hashes are also called 
    'associative arrays', 'dictionary', 'HashMap' etc. in other languages    
  %p
    A blank hash can be declared using two curly braces <code>{}</code>. Here is 
    an example of a Hash, with some items in it:

  %p
    %pre
      student_ages = {
      &nbsp;&nbsp;"Jack" => 10, 
      &nbsp;&nbsp;"Jill" => 12, 
      &nbsp;&nbsp;"Bob" => 14
      }    
  %p
    The names (Jack, Jill, Bob) are the 'keys', and 10, 12 and 14 are the corresponding values. 
    Now try creating a simple hash with the following keys and values:
    
  %pre
    Burger = 3
    Pizza = 10
    Coffee = 2          

  !enchant 3336
    exercise!
    short_name :hash_simple_exercise
    starting_code <<-DATA
    restaurant_menu = # Fill the hash here.
    
    
    
    DATA
    
    code_wrapper <<-DATA
      def user_code
        <%= user_code %>
      end
    DATA
    
    specs <<-DATA
      it "the price of a burger is 3" do
        user_code["Burger"].should == 3
      end
      it "the price of a pizza is 10" do
        user_code["Pizza"].should == 10
      end
      it "the price of a coffee is 2" do
        user_code["Coffee"].should == 2
      end
    DATA
    
    solution <<-DATA
restaurant_menu = {
  "Burger" => 3,
  "Pizza" => 10,
  "Coffee" => 2
}
  DATA
  !release

.section :fetch_from_a_hash, "Fetch values from a Hash", 167
  %p
    You can retrieve values from a Hash object using the <code>[]</code> operator.
    The key of the required value should be enclosed within these square brackets.

  %p
    Now try finding the price of a Burger from the <code>restaurant_menu</code> hash:
    write the name of the hash, and place the key inside the <code>[]</code>.
    In this case the key is a string so enclose the key
    in quotes.

  !enchant 3339
    exercise!
    short_name :hash_retrieval_exercise
    starting_code <<-DATA

    DATA
    code_wrapper <<-DATA
      def user_code
        restaurant_menu = {
          "Burger" => 3.5,
          "Pizza" => 10,
          "Coffee" => 2
        }
        <%= user_code %>
      end
      puts user_code.inspect
    DATA
    
    solution <<-DATA
restaurant_menu["Burger"]
    DATA
    
    specs <<-DATA
      it "find the price of the Burger from the restaurant_menu" do
        user_code.should == 3.5
      end
    DATA
  !release
  
  %p
    That was very simple, wasn't it? One small step at a time!

.section :modify_a_hash, "Modifying a Hash", 168
  %p 
    Once you've created a Hash object, you would want to add new key-value
    pairs as well as modify existing values.
  %p    
    Here is how you would set the price of a "Burger" in the
    <code>restaurant_menu</code> hash: 
  %p
    %pre
      restaurant_menu["Burger"] = 8
  
  %p
    In fact, you can create a blank hash and add all the values later. Now why
    don't you try assigning the following values to an empty hash?
    
  %pre
    Steak: 18
    Fries: 2
    
  !enchant 3358
    exercise!
    short_name :set_values_to_hash
    starting_code <<-DATA
      restaurant_menu = {}
      # set the values for each item separately here:
        
       
    DATA
    
    solution <<-DATA
restaurant_menu = {}
restaurant_menu["Steak"] = 18
restaurant_menu["Fries"] = 2

    DATA
    
    code_wrapper <<-DATA
      def user_code
        <%= user_code %>
        restaurant_menu
      end
    DATA
    
    specs <<-DATA
      it "price of Steak is 18" do
        user_code["Steak"].should eq(18)
      end
      it "price of Fries is 2" do
        user_code["Fries"].should eq(2)
      end
    DATA
  !release
